/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.impexp.to.jira.processor.vulnerability;

import java.util.HashMap;
import java.util.LinkedHashMap;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.context.properties.ConfigurationProperties;

import com.fortify.impexp.common.entity.config.EntityFilterConfig;
import com.fortify.impexp.common.entity.config.EntityTransformerConfig;
import com.fortify.impexp.common.export.helper.IExportConfig;
import com.fortify.impexp.common.processor.entity.source.IEntitySource;
import com.fortify.impexp.common.processor.entity.source.IEntitySourceDescriptor;
import com.fortify.impexp.common.to.annotation.ToPluginComponent;
import com.fortify.impexp.to.jira.processor.vulnerability.ToJiraVulnerabilityProcessorConfig.VulnerabilityConfig;
import com.fortify.util.spring.expression.TemplateExpression;

import lombok.Data;

@ToPluginComponent
@ConfigurationProperties("to.jira.vulnerabilities")
public class ToJiraVulnerabilityProcessorConfig extends HashMap<IEntitySource, VulnerabilityConfig> {
	private static final String EMPTY_TO_STRING = new ToJiraVulnerabilityProcessorConfig().toString();
	private static final long serialVersionUID = 1L;
	@Value("${to.jira.vulnerabilities:undefined}") private String property = "undefined";

	/**
	 * This method indicates whether the current instance has been configured,
	 * returning false if the {@link #toString()} value equals the {@link #toString()}
	 * value of an empty instance.
	 *   
	 * @return
	 */
	public boolean isConfigured() {
		return !EMPTY_TO_STRING.equals(this.toString());
	}
	
	public VulnerabilityConfig getVulnerabilityConfig(IEntitySourceDescriptor entitySourceDescriptor) {
		return getVulnerabilityConfig(entitySourceDescriptor.getSource());
	}
	
	private VulnerabilityConfig getVulnerabilityConfig(IEntitySource source) {
		return get(source);
	}

	@PostConstruct
	public void initialized() {
		System.out.println("Initialized ToJiraVulnerabilityProcessorConfig"+this);
	}
	
	@Data
	public static final class VulnerabilityConfig implements IExportConfig {
		private final EntityTransformerConfig transform = new EntityTransformerConfig();
		private final EntityFilterConfig filter = new EntityFilterConfig();
		private final ExportNewConfig exportNew = new ExportNewConfig();
		private final UpdateExistingConfig updateExisting = new UpdateExistingConfig();
		private final FieldsConfig fields = new FieldsConfig();
		
		@Override
		public EntityTransformerConfig getTransformerConfig() {
			return getTransform();
		}
		@Override
		public EntityFilterConfig getFilterConfig() {
			return getFilter();
		}
		@Override
		public TemplateExpression getExportNewGroupByExpression() {
			return getExportNew().getGroupBy();
		}
		@Override
		public EntityFilterConfig getExportNewFilterConfig() {
			return getExportNew().getFilter();
		}
		@Override
		public EntityFilterConfig getUpdateExistingFilterConfig() {
			return getUpdateExisting().getFilter();
		}
		
		
	}
	
	@Data
	public static final class ExportNewConfig {
		private final EntityFilterConfig filter = new EntityFilterConfig();
		private TemplateExpression groupBy;
	}
	
	@Data
	public static final class UpdateExistingConfig {
		private final EntityFilterConfig filter = new EntityFilterConfig();
		private String[] fieldsToUpdate;
	}
	
	@Data
	public static final class FieldsConfig {
		private final LinkedHashMap<String, TemplateExpression> fields = new LinkedHashMap<>();
		private final LinkedHashMap<String, TemplateExpression> appendedFields = new LinkedHashMap<>();
	}
}