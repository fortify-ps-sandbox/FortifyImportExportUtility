/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.impexp.to.jira.processor.vulnerability;

import java.util.Collection;

import org.springframework.beans.factory.annotation.Autowired;

import com.fortify.impexp.common.export.helper.ExportHelper;
import com.fortify.impexp.common.export.status.ActiveExportStatusHelpersInvoker;
import com.fortify.impexp.common.export.status.entity.ExportedEntityDescriptor;
import com.fortify.impexp.common.export.status.entity.ExportedEntityStatus;
import com.fortify.impexp.common.processor.INotifyStartAndEnd;
import com.fortify.impexp.common.processor.entity.source.IEntitySourceDescriptor;
import com.fortify.impexp.common.processor.entity.target.IEntityTargetDescriptor;
import com.fortify.impexp.common.to.annotation.ToPluginComponent;
import com.fortify.impexp.to.jira.processor.AbstractToJiraProcessor;
import com.fortify.impexp.to.jira.processor.connection.ToJiraExportedEntityDescriptor;
import com.fortify.impexp.to.jira.processor.connection.ToJiraRestConnection;
import com.fortify.impexp.to.jira.processor.entity.target.ToJiraTargetEntityDescriptor;
import com.fortify.impexp.to.jira.processor.vulnerability.ToJiraVulnerabilityProcessorConfig.VulnerabilityConfig;

// WORK IN PROGRESS
@ToPluginComponent
public class ToJiraVulnerabilityProcessor extends AbstractToJiraProcessor implements INotifyStartAndEnd {
	private static final IEntityTargetDescriptor ENTITY_TARGET_DESCRIPTOR = new ToJiraTargetEntityDescriptor().javaType(ExportedEntityDescriptor.class);
	@Autowired private ToJiraRestConnection conn;
	@Autowired ActiveExportStatusHelpersInvoker exportStatusHelper;
	@Autowired ToJiraVulnerabilityProcessorConfig config;
	private ExportHelper<Object> exportHelper;
	
	@Override
	public void notifyStart(IEntitySourceDescriptor entitySourceDescriptor) {
		VulnerabilityConfig vulnerabilityConfig = config.getVulnerabilityConfig(entitySourceDescriptor);
		this.exportHelper = ExportHelper.fromConfig(vulnerabilityConfig)
				.activeExportStatusHelpersInvoker(exportStatusHelper)
				.entitySourceDescriptor(entitySourceDescriptor)
				.entityTargetDescriptor(ENTITY_TARGET_DESCRIPTOR)
				.exportNewGroupProcessor(this::exportNew)
				.updateExistingGroupProcessor(this::updateExisting)
				.build();
	}
	
	@Override
	public void process(IEntitySourceDescriptor entitySourceDescriptor, Object sourceEntity) {
		exportHelper.add(entitySourceDescriptor, sourceEntity);
	}
	
	@Override
	public void notifyEnd(IEntitySourceDescriptor entitySourceDescriptor) {
		exportHelper.runAndClose(entitySourceDescriptor);
	}
	
	private void exportNew(IEntitySourceDescriptor entitySourceDescriptor, String groupName, Collection<Object> sourceEntities) {
		System.out.println(String.format("[%s] Processing to be exported: %s", this.getClass().getSimpleName(), sourceEntities));
		// TODO export to Jira
		String deepLink = conn.getBaseUrlStringWithTrailingSlash()+"id"; // conn.submitIssue(null);
		ToJiraExportedEntityDescriptor exportedEntityDescriptor = new ToJiraExportedEntityDescriptor(deepLink, ExportedEntityStatus.NEW, conn);
		
		//exportStatusHelper.updateSourceEntity(entitySourceDescriptor, TARGET_ENTITY_DESCRIPTOR, Arrays.asList(sourceEntity), exportedEntityDescriptor);
	}

	private void updateExisting(IEntitySourceDescriptor entitySourceDescriptor, String exportedEntityLocation, Collection<Object> sourceEntities) {
		System.out.println(String.format("[%s] Processing previously exported: %s", this.getClass().getSimpleName(), sourceEntities));
		// TODO export to Jira
		String deepLink = conn.getBaseUrlStringWithTrailingSlash()+"id"; // conn.submitIssue(null);
		ToJiraExportedEntityDescriptor exportedEntityDescriptor = new ToJiraExportedEntityDescriptor(deepLink, ExportedEntityStatus.NEW, conn);
		
		//exportStatusHelper.updateSourceEntity(entitySourceDescriptor, ENTITY_TARGET_DESCRIPTOR, Arrays.asList(sourceEntity), exportedEntityDescriptor);
	}
}
