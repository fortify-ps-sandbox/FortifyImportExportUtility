/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.impexp.to.jira.processor.vulnerability;

import java.util.Arrays;
import java.util.Collection;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;

import com.fortify.impexp.common.entity.config.EntityTransformer;
import com.fortify.impexp.common.processor.INotifyStartAndEnd;
import com.fortify.impexp.common.processor.entity.source.IEntitySourceDescriptor;
import com.fortify.impexp.common.processor.entity.target.IEntityTargetDescriptor;
import com.fortify.impexp.common.status.export.ActiveExportStatusHelpersInvoker;
import com.fortify.impexp.common.status.export.entity.ExportedEntityDescriptor;
import com.fortify.impexp.common.status.export.entity.ExportedEntityStatus;
import com.fortify.impexp.common.to.annotation.ToPluginComponent;
import com.fortify.impexp.to.jira.processor.AbstractToJiraProcessor;
import com.fortify.impexp.to.jira.processor.connection.ToJiraExportedEntityDescriptor;
import com.fortify.impexp.to.jira.processor.connection.ToJiraRestConnection;
import com.fortify.impexp.to.jira.processor.entity.target.ToJiraTargetEntityDescriptor;
import com.fortify.impexp.to.jira.processor.vulnerability.ToJiraVulnerabilityProcessorConfig.ToBeExportedConfig;
import com.fortify.impexp.to.jira.processor.vulnerability.ToJiraVulnerabilityProcessorConfig.VulnerabilityConfig;
import com.fortify.util.grouping.Grouping;
import com.fortify.util.spring.SpringExpressionUtil;
import com.fortify.util.spring.expression.TemplateExpression;

// WORK IN PROGRESS
@ToPluginComponent
public class ToJiraVulnerabilityProcessor extends AbstractToJiraProcessor implements INotifyStartAndEnd {
	private static final IEntityTargetDescriptor TARGET_ENTITY_DESCRIPTOR = new ToJiraTargetEntityDescriptor().javaType(ExportedEntityDescriptor.class);
	@Autowired private ToJiraRestConnection conn;
	@Autowired ActiveExportStatusHelpersInvoker exportStatusHelper;
	@Autowired ToJiraVulnerabilityProcessorConfig config;
	private Grouping<Object> toBeExportedGrouping;
	private Grouping<Object> previouslyExportedGrouping;
	
	@Override
	public void notifyStart(IEntitySourceDescriptor entitySourceDescriptor) {
		VulnerabilityConfig vulnerabilityConfig = config.getVulnerabilityConfig(entitySourceDescriptor);
		ToBeExportedConfig toBeExportedConfig = vulnerabilityConfig.getToBeExported();
		TemplateExpression groupByExpr = toBeExportedConfig.getGroupBy(); 
		
		this.toBeExportedGrouping = Grouping.builder()
				.groupNameFunction(SpringExpressionUtil.expressionAsFunction(groupByExpr, String.class))
				.blankGroupNameConsumer(Grouping::directInvokeOnBlankGroupName)
				.groupConsumer(this::processGroupedSourceEntities)
				.build();
	}
	
	private void processGroupedSourceEntities(String groupName, Collection<Object> sourceEntities) {
		System.out.println(String.format("[%s] Processing to be exported: %s", this.getClass().getSimpleName(), sourceEntities));
		// TODO export to Jira
		String deepLink = conn.getBaseUrlStringWithTrailingSlash()+"id"; // conn.submitIssue(null);
		ToJiraExportedEntityDescriptor exportedEntityDescriptor = new ToJiraExportedEntityDescriptor(deepLink, ExportedEntityStatus.NEW, conn);
		
		//exportStatusHelper.updateSourceEntity(entitySourceDescriptor, TARGET_ENTITY_DESCRIPTOR, Arrays.asList(sourceEntity), exportedEntityDescriptor);
	}
	
	@Override
	public void notifyEnd(IEntitySourceDescriptor entitySourceDescriptor) {
		// TODO groupings.runAndClose
	}
	
	@Override
	public void process(IEntitySourceDescriptor entitySourceDescriptor, Object sourceEntity) {
		System.out.println("config: "+config);
		sourceEntity = new EntityTransformer(config.getVulnerabilityConfig(entitySourceDescriptor).getTransform()).transform(sourceEntity);
		String exportedEntityLocation = exportStatusHelper.getExportedEntityLocation(entitySourceDescriptor, TARGET_ENTITY_DESCRIPTOR, sourceEntity);
		if ( StringUtils.isNotBlank(exportedEntityLocation) ) {
			processPreviouslyExported(entitySourceDescriptor, sourceEntity, exportedEntityLocation);
		} else {
			processToBeExported(entitySourceDescriptor, sourceEntity);
		}
	}

	private void processToBeExported(IEntitySourceDescriptor entitySourceDescriptor, Object sourceEntity) {
		toBeExportedGrouping.add(sourceEntity);
	}

	private void processPreviouslyExported(IEntitySourceDescriptor entitySourceDescriptor, Object sourceEntity, String exportedEntityLocation) {
		System.out.println(String.format("[%s] Processing previously exported: %s", this.getClass().getSimpleName(), sourceEntity));
		// TODO export to Jira
		String deepLink = conn.getBaseUrlStringWithTrailingSlash()+"id"; // conn.submitIssue(null);
		ToJiraExportedEntityDescriptor exportedEntityDescriptor = new ToJiraExportedEntityDescriptor(deepLink, ExportedEntityStatus.NEW, conn);
		
		exportStatusHelper.updateSourceEntity(entitySourceDescriptor, TARGET_ENTITY_DESCRIPTOR, Arrays.asList(sourceEntity), exportedEntityDescriptor);
	}
}
