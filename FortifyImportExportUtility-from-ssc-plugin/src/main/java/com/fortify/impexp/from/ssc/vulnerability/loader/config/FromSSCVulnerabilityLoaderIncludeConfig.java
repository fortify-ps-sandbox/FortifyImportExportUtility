/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.impexp.from.ssc.vulnerability.loader.config;

import java.util.HashSet;
import java.util.Set;

import com.fortify.client.ssc.api.query.builder.EmbedType;
import com.fortify.client.ssc.api.query.builder.SSCApplicationVersionIssuesQueryBuilder;
import com.fortify.impexp.common.from.loader.config.LoaderIncludeConfig;

import lombok.Data;
import lombok.EqualsAndHashCode;

@Data @EqualsAndHashCode(callSuper=true)
public class FromSSCVulnerabilityLoaderIncludeConfig extends LoaderIncludeConfig {
	private final Set<String> status = new HashSet<>(); // all, hidden, removed, suppressed  
	
	public void updateQueryBuilder(SSCApplicationVersionIssuesQueryBuilder qb) {
		qb.paramFields(getFields());
		addSubEntities(qb);
		qb.paramShowHidden(isStatusIncluded("hidden"))
			.paramShowRemoved(isStatusIncluded("removed"))
			.paramShowSuppressed(isStatusIncluded("suppressed"));
	}

	private void addSubEntities(SSCApplicationVersionIssuesQueryBuilder queryBuilder) {
		LoaderIncludeSubEntityConfig[] subEntities = getSubEntities();
		if ( subEntities!=null ) {
			for ( LoaderIncludeSubEntityConfig subEntity : subEntities ) {
				queryBuilder.embedSubEntity(subEntity.getName(), EmbedType.PRELOAD, subEntity.getFields());
			}
		}
	}
	
	private boolean isStatusIncluded(String type) {
		return getStatus().contains(type) || getStatus().contains("all");
	}
}
