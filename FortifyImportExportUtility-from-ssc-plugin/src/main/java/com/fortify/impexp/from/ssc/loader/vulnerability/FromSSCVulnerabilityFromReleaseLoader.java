/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.impexp.from.ssc.loader.vulnerability;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;

import com.fortify.client.ssc.api.SSCIssueAPI;
import com.fortify.client.ssc.api.SSCIssueTemplateAPI.SSCIssueTemplateHelper;
import com.fortify.client.ssc.api.query.builder.EmbedType;
import com.fortify.client.ssc.api.query.builder.SSCApplicationVersionIssuesQueryBuilder;
import com.fortify.client.ssc.connection.SSCAuthenticatingRestConnection;
import com.fortify.impexp.common.from.spi.annotation.FromPluginComponent;
import com.fortify.impexp.common.from.spi.loader.AbstractIntermediateLoader;
import com.fortify.impexp.common.processor.entity.IEntityDescriptor;
import com.fortify.impexp.from.ssc.annotation.FromSSC;
import com.fortify.util.rest.json.JSONList;
import com.fortify.util.rest.json.JSONMap;
import com.fortify.util.rest.json.preprocessor.enrich.JSONMapEnrichWithValue;

@FromPluginComponent @FromSSC @Lazy
public class FromSSCVulnerabilityFromReleaseLoader extends AbstractIntermediateLoader<JSONMap> {
	@Autowired @FromSSC private SSCAuthenticatingRestConnection conn;
	@Autowired @FromSSC private SSCIssueTemplateHelper issueTemplateHelper;
	@Autowired @FromSSC private FromSSCVulnerabilityFromReleaseLoaderConfig config;
	
	@Override
	public void process(IEntityDescriptor entityDescriptor, final JSONMap release) {
		SSCApplicationVersionIssuesQueryBuilder queryBuilder = conn.api(SSCIssueAPI.class)
			.queryIssues(release.get("id", String.class))
			.paramShowHidden(isIncluded("hidden"))
			.paramShowRemoved(isIncluded("removed"))
			.paramShowSuppressed(isIncluded("suppressed"))
			.paramFilterSetId(true, getFilterSetId(release))
			.paramFields(config.getFields())
			.paramOrderBy(true, config.getOrderBy())
			.maxResults(config.getMaxResults())
			.preProcessor(new JSONMapEnrichWithValue("release", release));
		addSubEntities(queryBuilder, config.getIncludeSubEntities());
		queryBuilder
			.build()
			.processAll(this::processVulnerability);
	}
	
	private String getFilterSetId(JSONMap release) {
		String filterSet = config.getFilterSet();
		String result = null;
		if ( StringUtils.isNotBlank(filterSet) ) {
			JSONList filterSets = release.get("filterSets", JSONList.class);
			if ( filterSets==null ) {
				// TODO Load filter sets and add to release instead of throwing exception
				throw new IllegalStateException("Please add 'filterSets' to from.ssc.load.releases.includeSubEntities property");
			}
			result = filterSets.mapValue("title", filterSet, "guid", String.class);
			if ( result==null ) {
				result = filterSets.mapValue("guid", filterSet, "guid", String.class);
			}
			if ( result==null ) {
				throw new IllegalArgumentException("Unknown filter set name or id "+filterSet);
			}
		}
		
		return result;
	}

	private void addSubEntities(SSCApplicationVersionIssuesQueryBuilder queryBuilder, String[] subEntities) {
		if ( subEntities!=null ) {
			for ( String subEntity : subEntities ) {
				queryBuilder.embedSubEntity(subEntity, subEntity, EmbedType.PRELOAD);
			}
		}
	}

	private boolean isIncluded(String type) {
		return config.getInclude().contains(type) || config.getInclude().contains("all");
	}

	private final void processVulnerability(JSONMap release) {
		invokeActiveProcessors(FromSSCVulnerabilityFromReleaseLoaderFactory.ENTITY_DESCRIPTOR, release);
	}
}
