/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.impexp.from.ssc.vulnerability.status.export.config;

import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.Function;

import javax.annotation.PostConstruct;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.context.properties.ConfigurationProperties;

import com.fortify.impexp.common.from.annotation.FromPluginComponent;
import com.fortify.impexp.common.processor.entity.target.IEntityTarget;
import com.fortify.impexp.common.processor.entity.target.IEntityTargetDescriptor;
import com.fortify.impexp.from.ssc.annotation.FromSSC;
import com.fortify.util.spring.expression.TemplateExpression;

import lombok.Data;

@Data
@FromPluginComponent @FromSSC
@ConfigurationProperties("from.ssc.load.vulnerabilities")
public final class FromSSCVulnerabilityExportStatusConfig {
	private static final String EMPTY_TO_STRING = new FromSSCVulnerabilityExportStatusConfig().toString();
	@Value("${from.ssc.load.vulnerabilities:undefined}") private String property = "undefined";
	
	private final Map<IEntityTarget, TargetConfig> exportStatus = new HashMap<>();

	public final <T> T getOrNull(IEntityTargetDescriptor targetDescriptor, Function<TargetConfig,T> method) {
		return getOrNull(targetDescriptor.getTarget(), method);
	}
	
	public final <T> T getOrNull(IEntityTarget target, Function<TargetConfig,T> method) {
		TargetConfig configForTarget = exportStatus.get(target);
		return configForTarget==null ? null : method.apply(configForTarget);
	}
	
	/**
	 * This method indicates whether the current instance has been configured,
	 * returning false if the {@link #toString()} value equals the {@link #toString()}
	 * value of an empty instance.
	 *   
	 * @return
	 */
	public boolean isConfigured() {
		return !EMPTY_TO_STRING.equals(this.toString());
	}
	
	@PostConstruct
	public final void logInitialized() {
		System.out.println("Initialized "+this);
	}
	
	@Data
	public static final class TargetConfig {
		private TemplateExpression storeAsBugLink;
		private String primaryCustomTag;
		private final Map<String, TemplateExpression> customTag = new LinkedHashMap<String, TemplateExpression>();
		
		public final String getPrimaryCustomTag() {
			if ( StringUtils.isNotBlank(primaryCustomTag) && customTag.containsKey(primaryCustomTag) ) {
				return primaryCustomTag;
			} else if ( customTag.size()==1 ) {
				return customTag.keySet().iterator().next();
			} else {
				return null;
			}
		}
	}
}
