/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/

plugins {
	id 'org.springframework.boot' version '2.2.1.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE' apply false
	id "com.jfrog.bintray" version "1.8.4"
	id 'org.ajoberstar.grgit' version "4.0.0"
	id 'com.github.jk1.dependency-license-report' version '1.12'
	id "org.kordamp.gradle.markdown" version "2.0.0"
	id 'com.google.cloud.tools.jib' version '2.2.0'
//	id "io.freefair.lombok" version '4.1.2'
	id 'eclipse'
}

// Apply 'java' plugin for root project, 'java-library' plugin for sub-projects
apply plugin: 'java'
subprojects {
	apply plugin: 'java-library'
}

// Set up source compatibility and JUnit for all projects 
allprojects {
	sourceCompatibility = 1.8
	test {
		useJUnitPlatform()
	}
	eclipse {
	    classpath {
	        plusConfigurations += [ configurations.compileOnly ]
	   	}
	}
}

// Set up Gradle helpers for all projects
allprojects {
	ext {
		gradleHelpersLocation = "https://raw.githubusercontent.com/fortify-ps/gradle-helpers/1.2"
	}

	apply from: "${gradleHelpersLocation}/repo-helper.gradle"
	apply from: "${gradleHelpersLocation}/version-helper.gradle"
	apply from: "${gradleHelpersLocation}/thirdparty-helper.gradle"
}

// Configure group and version for all projects
allprojects {
	group = 'com.fortify.export.vulnerabilities'
	version = getProjectVersionAsBetaOrRelease(true)
}

// Set up dependency management for all projects
allprojects {
	apply plugin: 'io.spring.dependency-management'
	
	ext {
		dependencyVersion=[
			'fortify-client-api':         '5.6-SNAPSHOT',
			'fortify-spring-boot-helper': '1.0-SNAPSHOT'
		]
	}
	
	dependencyManagement {
		imports {
			mavenBom("com.fortify.client.api:fortify-client-api:${dependencyVersion['fortify-client-api']}")
		}
		dependencies {
			dependency "com.fortify.util.spring.boot:fortify-spring-boot-helper:${dependencyVersion['fortify-spring-boot-helper']}"
		}
	}
}

// Include all dependencies used by main app and dependencies provided to plugin implementations 
dependencies {
	implementation 'com.fortify.util.spring.boot:fortify-spring-boot-helper'
	implementation project(':FortifyImportExportUtility-common')
	implementation project(':FortifyImportExportUtility-common-from')
	implementation project(':FortifyImportExportUtility-common-to')
	implementation 'com.fortify.client.api:client-api-ssc'
	implementation 'com.fortify.client.api:client-api-fod'
}

bootJar {
	manifest {
		attributes 'Main-Class': 'org.springframework.boot.loader.PropertiesLauncher'
	}
}

ext {
	betaOrReleaseLabel = getBetaOrReleaseLabel() 
	bintrayRepo = "${betaOrReleaseLabel}"
	bintrayPkgName = "${rootProject.name}"
	bintrayDownloadContainerName = getProjectVersionAsBetaOrRelease(false)
	projectLicense = 'MIT'
}

apply from: "${gradleHelpersLocation}/bintray-binaries-helper.gradle"
apply from: "${gradleHelpersLocation}/fortify-helper.gradle"
apply from: "${gradleHelpersLocation}/readme2html.gradle"

configurations.all {
    // Don't cache modules that may change (i.e. snapshots)
	resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}


task dist(type: Zip) {
	dependsOn 'build', 'readme2html'
	archiveFileName = "${rootProject.name}-${project.version}.zip"
	destinationDirectory = file("$buildDir/dist")
	from "${buildDir}/html"
	from("${projectDir}") {
		include "config/**/*"
		include "LICENSE.TXT"
	}
	from("${libsDir}") {
		include "${rootProject.name}-${project.version}.jar"
	}
	subprojects.each { subproject ->
		if ( subproject.name.endsWith('-plugin') ) {
			dependsOn subproject.build
			into("plugins") {
				from subproject.libsDir
				include "${subproject.name}-${project.version}.jar"
			}
		}
	}
}

bintray {
    filesSpec {
       from("${buildDir}/dist") {
          include "*.zip"
       }
       into '.'
    }
}
_bintrayRecordingCopy.dependsOn 'clean', 'dist', 'distThirdParty'

/*
task copyExtraJibFiles(type: Copy) {
	into "${buildDir}/jibExtraFiles"
	into("default/config/samples") {
		from "${projectDir}/config"
	}
	into("default/config") {
		from "${projectDir}/config"
		include 'FortifySyncFoDToSSC-minimal.yml'
		rename 'FortifySyncFoDToSSC-minimal.yml', 'FortifySyncFoDToSSC.yml'
	}
}

jib {
	to {
		image = "rsenden/sync-fod-to-ssc:${getProjectVersionAsBetaOrRelease(false)}"
		tags = ['latest', "latest-"+betaOrReleaseLabel]
		auth {
			username = System.getenv('DOCKER_IO_USER')
			password = System.getenv('DOCKER_IO_PASSWORD')
		}
		extraDirectories {
			paths = ['src/main/jib', "${buildDir}/jibExtraFiles"]
			permissions = [
				// Read/write/execute for all, to allow container to run as any user
				'/config': '777', 
				'/work': '777'
	        ]
		}
		container {
			jvmFlags = ['-DpopulateContainerDirs=true', '-Dsync.config=/config/FortifySyncFoDToSSC.yml', '-Dsync.home=/work']
			volumes = ['/config', '/work']
		}
	}
}
tasks.jib.dependsOn copyExtraJibFiles
tasks.jibBuildTar.dependsOn copyExtraJibFiles
*/